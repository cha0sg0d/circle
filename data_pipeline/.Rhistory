class(out) <- classes[x] ; out }), NAMES)
temp_metadata[["ColName"]] <- make.names(gsub("\\s", "", temp_metadata[["ColName"]]))
temp_metadata
}
read.dat <- function(dat, metadata_var, labels.included = "yes") {
read.fwf(dat, widths = metadata_var[["ColWidth"]], col.names = metadata_var[["ColName"]])
}
GSS_metadata <- read.dct("GSS.dct")
GSS_ascii <- read.dat("GSS.dat", GSS_metadata)
attr(GSS_ascii, "col.label") <- GSS_metadata[["ColLabel"]]
GSS <- GSS_ascii
getwd()
library(foreign)
read.dct <- function(dct, labels.included = "yes") {
temp <- readLines(dct)
temp <- temp[grepl("_column", temp)]
switch(labels.included,
yes = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+)[a-z]\\s+(.*)"
classes <- c("numeric", "character", "character", "numeric", "character")
N <- 5
NAMES <- c("StartPos", "Str", "ColName", "ColWidth", "ColLabel")
},
no = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+).*"
classes <- c("numeric", "character", "character", "numeric")
N <- 4
NAMES <- c("StartPos", "Str", "ColName", "ColWidth")
})
temp_metadata <- setNames(lapply(1:N, function(x) {
out <- gsub(pattern, paste("\\", x, sep = ""), temp)
out <- gsub("^\\s+|\\s+$", "", out)
out <- gsub('\"', "", out, fixed = TRUE)
class(out) <- classes[x] ; out }), NAMES)
temp_metadata[["ColName"]] <- make.names(gsub("\\s", "", temp_metadata[["ColName"]]))
temp_metadata
}
read.dat <- function(dat, metadata_var, labels.included = "yes") {
read.fwf(dat, widths = metadata_var[["ColWidth"]], col.names = metadata_var[["ColName"]])
}
GSS_metadata <- read.dct("GSS.dct")
GSS_ascii <- read.dat("GSS.dat", GSS_metadata)
attr(GSS_ascii, "col.label") <- GSS_metadata[["ColLabel"]]
GSS <- GSS_ascii
getwd()
library(foreign)
read.dct <- function(dct, labels.included = "yes") {
temp <- readLines(dct)
temp <- temp[grepl("_column", temp)]
switch(labels.included,
yes = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+)[a-z]\\s+(.*)"
classes <- c("numeric", "character", "character", "numeric", "character")
N <- 5
NAMES <- c("StartPos", "Str", "ColName", "ColWidth", "ColLabel")
},
no = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+).*"
classes <- c("numeric", "character", "character", "numeric")
N <- 4
NAMES <- c("StartPos", "Str", "ColName", "ColWidth")
})
temp_metadata <- setNames(lapply(1:N, function(x) {
out <- gsub(pattern, paste("\\", x, sep = ""), temp)
out <- gsub("^\\s+|\\s+$", "", out)
out <- gsub('\"', "", out, fixed = TRUE)
class(out) <- classes[x] ; out }), NAMES)
temp_metadata[["ColName"]] <- make.names(gsub("\\s", "", temp_metadata[["ColName"]]))
temp_metadata
}
read.dat <- function(dat, metadata_var, labels.included = "yes") {
read.fwf(dat, widths = metadata_var[["ColWidth"]], col.names = metadata_var[["ColName"]])
}
GSS_metadata <- read.dct("GSS.dct")
GSS_ascii <- read.dat("GSS.dat", GSS_metadata)
attr(GSS_ascii, "col.label") <- GSS_metadata[["ColLabel"]]
GSS <- GSS_ascii
setwd("/Users/anthonygoss/Projects/circle/white_youth_2018/first_analysis")
library(foreign)
read.dct <- function(dct, labels.included = "yes") {
temp <- readLines(dct)
temp <- temp[grepl("_column", temp)]
switch(labels.included,
yes = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+)[a-z]\\s+(.*)"
classes <- c("numeric", "character", "character", "numeric", "character")
N <- 5
NAMES <- c("StartPos", "Str", "ColName", "ColWidth", "ColLabel")
},
no = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+).*"
classes <- c("numeric", "character", "character", "numeric")
N <- 4
NAMES <- c("StartPos", "Str", "ColName", "ColWidth")
})
temp_metadata <- setNames(lapply(1:N, function(x) {
out <- gsub(pattern, paste("\\", x, sep = ""), temp)
out <- gsub("^\\s+|\\s+$", "", out)
out <- gsub('\"', "", out, fixed = TRUE)
class(out) <- classes[x] ; out }), NAMES)
temp_metadata[["ColName"]] <- make.names(gsub("\\s", "", temp_metadata[["ColName"]]))
temp_metadata
}
read.dat <- function(dat, metadata_var, labels.included = "yes") {
read.fwf(dat, widths = metadata_var[["ColWidth"]], col.names = metadata_var[["ColName"]])
}
GSS_metadata <- read.dct("GSS.dct")
GSS_ascii <- read.dat("GSS.dat", GSS_metadata)
attr(GSS_ascii, "col.label") <- GSS_metadata[["ColLabel"]]
GSS <- GSS_ascii
View(GSS)
# Note GSS dataframe is loaded into the environment from R script.
library('dplyr')
GSS <- GSS %>%
mutate(age_bucket = ifelse(age > 30, 1, 0))
GSS <- GSS %>%
mutate(age_bucket = ifelse(AGE > 30, 1, 0))
View(GSS)
GSS <- GSS %>%
filter(age_bucket==1)
mytable <- table(GSS$RACE, GSS$PARTYID)
ftable(mytable)
ftable(mytable)
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
# Frequency count
crosstab(GSS, row.vars = "RACE", col.vars = "PARTYID", type = "f")
table(AGE)
table(GSS$AGE)
GSS <- GSS %>%
mutate(age_bucket = ifelse(AGE > 30, 1, 0))
GSS <- GSS %>%
filter(age_bucket==1)
GSS <- GSS %>%
mutate(age_bucket = ifelse(AGE < 30, 1, 0))
GSS <- GSS %>%
filter(age_bucket==1)
GSS <- GSS %>%
mutate(age_bucket = ifelse(AGE < 30, 1, 0))
GSS <- GSS %>%
filter(age_bucket==1)
View(GSS_ascii)
setwd("/Users/anthonygoss/Projects/circle/white_youth_2018/first_analysis")
ibrary(foreign)
read.dct <- function(dct, labels.included = "yes") {
temp <- readLines(dct)
temp <- temp[grepl("_column", temp)]
switch(labels.included,
yes = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+)[a-z]\\s+(.*)"
classes <- c("numeric", "character", "character", "numeric", "character")
N <- 5
NAMES <- c("StartPos", "Str", "ColName", "ColWidth", "ColLabel")
},
no = {
pattern <- "_column\\(([0-9]+)\\)\\s+([a-z0-9]+)\\s+(.*)\\s+%([0-9]+).*"
classes <- c("numeric", "character", "character", "numeric")
N <- 4
NAMES <- c("StartPos", "Str", "ColName", "ColWidth")
})
temp_metadata <- setNames(lapply(1:N, function(x) {
out <- gsub(pattern, paste("\\", x, sep = ""), temp)
out <- gsub("^\\s+|\\s+$", "", out)
out <- gsub('\"', "", out, fixed = TRUE)
class(out) <- classes[x] ; out }), NAMES)
temp_metadata[["ColName"]] <- make.names(gsub("\\s", "", temp_metadata[["ColName"]]))
temp_metadata
}
read.dat <- function(dat, metadata_var, labels.included = "yes") {
read.fwf(dat, widths = metadata_var[["ColWidth"]], col.names = metadata_var[["ColName"]])
}
GSS_metadata <- read.dct("GSS.dct")
GSS_ascii <- read.dat("GSS.dat", GSS_metadata)
attr(GSS_ascii, "col.label") <- GSS_metadata[["ColLabel"]]
GSS <- GSS_ascii
young_GSS <- GSS %>%
mutate(age_bucket = ifelse(AGE < 30, 1, 0))
young_GSS <- young_GSS %>%
filter(age_bucket==1)
young_GSS <- GSS %>%
filter(AGE < 30)
working_app <- read.delim("/Users/anthonygoss/Downloads/working_applications2016_0000.txt")
# curr <- mean(duplicated(working_app$anid) == TRUE) returns .15
library(dplyr)
subset_working_app <- sample_n(working_app, 100000)
rm(working_app)
copy <- subset_working_app
subset_working_app$subgroup[subset_working_app$subgroup==""] <- NA
subset_working_app$subgroup <- as.character(subset_working_app$subgroup)
subset_working_app$subgroup[is.na(subset_working_app$subgroup)] <- "vpc"
View(subset_working_app)
colnames()
colnames(subset_working_app)
names <- colnames(subset_working_app)[42:45]
names
names[1] + "s"
paste(names[1],"s",sep="")
names <- colnames(subset_working_app)[42:45]
subset_working_app_1 <- subset_working_app %>%
for (name in names) {
mutate(name, name = ifelse(name == "t", 1, 0))
}
subset_working_app_1 <- subset_working_app %>%
for (name in names) {
print(name)
mutate(name, name = ifelse(name == "t", 1, 0))
}
names <- colnames(subset_working_app)[42:45]
for (name in names) {
subset_working_app_1 <- subset_working_app %>%
mutate(name, name = ifelse(name == "t", 1, 0))
}
View(subset_working_app_1)
for (name in names) {
#subset_working_app_1 <- subset_working_app %>%
#   mutate(name, name = ifelse(name == "t", 1, 0))
print(name)
}
for (name in names) {
subset_working_app_1 <- subset_working_app %>%
mutate(name, name = ifelse(name == "t", 1, 0))
}
for (name in names) {
subset_working_app_1 <- subset_working_app %>%
mutate(name = ifelse(name == "t", 1, 0))
}
names
rm(subset_working_app_1)
subset_working_app_1 <- subset_working_app %>%
mutate(matched_app = ifelse(matched_app == "t", 1, 0)) %>%
mutate(successful_app = ifelse(successful_app == "t", 1, 0)) %>%
mutate(roll_changing_app = ifelse(roll_changing_app == "t", 1, 0)) %>%
mutate(new_registrant = ifelse(new_registrant == "t", 1, 0))
subset_working_app_2 <- subset_working_app_1 %>%
mutate(general_election_voters_2016 = ifelse((successful_app == 1 & es_n2016g == 1),1,0)) %>%
mutate(general_election_roll_changing_voters_2016 =
ifelse((roll_changing_app == 1 & es_n2016g == 1),1,0)) %>%
mutate(general_election_new_voters_2016 = ifelse((new_registrant == 1 & es_n2016g == 1),1,0))
count(subset_working_app_2,anid)
duplicates <- arrange(desc(count(subset_working_app_2,anid)))
duplicates <- desc(count(subset_working_app_2,anid))
duplicates <- count(subset_working_app_2,anid)
View(duplicates)
duplicates <- duplicates %>%
arrange(desc(anid))
duplicates <- duplicates %>%
arrange(desc(anid))
duplicates <- count(subset_working_app_2,anid)
duplicates <- duplicates %>%
arrange(desc(n))
duplicates <- duplicates %>%
arrange(desc(n)) %>%
group_by(n)
table(duplicates$n)
duplicates <- count(subset_working_app_2,anid)
duplicates <- duplicates %>%
arrange(desc(n))
num_dups <- table(duplicates$n)
ranks <- table(subset_working_app_2$person_rank)
ranks
num_dups
#max(case when person_rank=1 then race else null end) as race # Pull the race from their "best" # record
subset_working_app_3 <- subset_working_app_2 %>%
mutate(race = ifelse(person_rank == 1,race,NA))
View(subset_working_app_3)
#max(case when person_rank=1 then race else null end) as race # Pull the race from their "best" # record
subset_working_app_3 <- subset_working_app_2 %>%
mutate(race = ifelse(person_rank == 1,race,NULL))
subset_working_app_3 <- subset_working_app_2 %>%
mutate(race = if(person_rank == 1,race))
subset_working_app_3 <- subset_working_app_2 %>%
mutate(race = ifelse(person_rank == 1,race,"unknown"))
subset_working_app_2 %>%
summarize(sum_ = sum(matched_app, na.rm = TRUE))
pull()
subset_working_app_2 %>%
summarize(sum = sum(matched_app, na.rm = TRUE))
subset_working_app_2 %>%
summarize(sum = sum(matched_app, na.rm = FALSE))
subset_working_app_2 %>%
summarize(sum = sum(matched_app))
test <- subset_working_app_2[,race]
test <- subset_working_app_2[,names[1]]
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(records_submitted = sum(records_submitted)) %>%
summarize(matched_applicants = sum(matched_app))
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app))
View(output)
table(subset_working_app_2$matched_apps)
table(subset_working_app_2$matched_app)
string <- "matched_app"
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(string))
string <- "matched_app"
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(subset_working_app_2[string,]))
rm(output)
rm(output)
string <- "matched_app"
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(subset_working_app_2[[string]]))
string <- "matched_app"
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum([[string]]))
string <- "matched_app"
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum([string]))
string <- "matched_app"
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(subset_working_app_2[,string]))
View(subset_working_app_2)
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app))
summarize(successful_applicants = sum(successful_app))
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)) %>%
summarize(successful_applicants = sum(successful_app)) %>%
summarize(roll_changing_applicants = sum(roll_changing_app)) %>%
summarize(new_registrants = sum(new_registrant)) %>%
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)) %>%
summarize(successful_applicants = sum(successful_app)) %>%
summarize(roll_changing_applicants = sum(roll_changing_app)) %>%
summarize(new_registrants = sum(new_registrant))
rm(output)
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)) %>%
summarize(successful_applicants = sum(successful_app)) %>%
summarize(roll_changing_applicants = sum(roll_changing_app)) %>%
summarize(new_registrants = sum(new_registrant))
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app))
summarize(successful_applicants = sum(successful_app)) %>%
summarize(roll_changing_applicants = sum(roll_changing_app)) %>%
summarize(new_registrants = sum(new_registrant))
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)) %>%
summarize(successful_applicants = sum(successful_app)) %>%
summarize(roll_changing_applicants = sum(roll_changing_app)) %>%
summarize(new_registrants = sum(new_registrant))
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)) %>%
summarize(successful_applicants = sum(successful_app)) %>%
summarize(roll_changing_applicants = sum(roll_changing_app)) %>%
summarize(new_registrants = sum(new_registrant))
output <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app), successful_applicants = sum(successful_app), roll_changing_applicants = sum(roll_changing_app), new_registrants = sum(new_registrant))
View(copy)
counts <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app), successful_applicants = sum(successful_app), roll_changing_applicants = sum(roll_changing_app), new_registrants = sum(new_registrant))
# We can select any subset we want using dplyr's select function.
#select(subset_working_app,)
names <- colnames(subset_working_app)[42:45]
# Recode "t" / "f" as 1 and 0
subset_working_app_1 <- subset_working_app %>%
mutate(matched_app = ifelse(matched_app == "t", 1, 0)) %>%
mutate(successful_app = ifelse(successful_app == "t", 1, 0)) %>%
mutate(roll_changing_app = ifelse(roll_changing_app == "t", 1, 0)) %>%
mutate(new_registrant = ifelse(new_registrant == "t", 1, 0))
mutate(unique_applicants = 1)
# We can select any subset we want using dplyr's select function.
#select(subset_working_app,)
names <- colnames(subset_working_app)[42:45]
# Recode "t" / "f" as 1 and 0
subset_working_app_1 <- subset_working_app %>%
mutate(matched_app = ifelse(matched_app == "t", 1, 0)) %>%
mutate(successful_app = ifelse(successful_app == "t", 1, 0)) %>%
mutate(roll_changing_app = ifelse(roll_changing_app == "t", 1, 0)) %>%
mutate(new_registrant = ifelse(new_registrant == "t", 1, 0)) %>%
add_column(unique_applicants = 1)
install.packages('tibble')
library('tibble')
# We can select any subset we want using dplyr's select function.
#select(subset_working_app,)
library('tibble')
names <- colnames(subset_working_app)[42:45]
# Recode "t" / "f" as 1 and 0
subset_working_app_1 <- subset_working_app %>%
mutate(matched_app = ifelse(matched_app == "t", 1, 0)) %>%
mutate(successful_app = ifelse(successful_app == "t", 1, 0)) %>%
mutate(roll_changing_app = ifelse(roll_changing_app == "t", 1, 0)) %>%
mutate(new_registrant = ifelse(new_registrant == "t", 1, 0)) %>%
add_column(unique_applicants = 1)
# Create new variables for voting behavior 2016 general election:
# general election voters 2016 = voters who are "successful" and voted in 2016
# general election roll changing voters 2016 = voters who are "roll changing" and voted in 2016
# general election new voters 2016 = voters who are "new registrants" and voted in 2016
# NOTE: Update this to 2018 for 2018 report
subset_working_app_2 <- subset_working_app_1 %>%
mutate(general_election_voters_2016 = ifelse((successful_app == 1 & es_n2016g == 1),1,0)) %>%
mutate(general_election_roll_changing_voters_2016 =
ifelse((roll_changing_app == 1 & es_n2016g == 1),1,0)) %>%
mutate(general_election_new_voters_2016 = ifelse((new_registrant == 1 & es_n2016g == 1),1,0))
percentages <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)/sum(unique_applicants), successful_applicants = sum(successful_app)/sum(unique_applicants), roll_changing_applicants = sum(roll_changing_app)/sum(unique_applicants), new_registrants = sum(new_registrant)/sum(unique_applicants))
View(percentages)
counts <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app), successful_applicants = sum(successful_app), roll_changing_applicants = sum(roll_changing_app), new_registrants = sum(new_registrant),roll_change_2016 = sum(general_election_roll_changing_voters_2016),new_voter_2016 = (general_election_new_voters_2016))
counts <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app), successful_applicants = sum(successful_app), roll_changing_applicants = sum(roll_changing_app), new_registrants = sum(new_registrant),roll_change_2016 = sum(general_election_roll_changing_voters_2016),new_voter_2016 = sum(general_election_new_voters_2016))
View(counts)
percentages <- subset_working_app_2 %>%
group_by(subgroup) %>%
summarize(matched_applicants = sum(matched_app)/sum(unique_applicants), successful_applicants = sum(successful_app)/sum(unique_applicants), roll_changing_applicants = sum(roll_changing_app)/sum(unique_applicants), new_registrants = sum(new_registrant)/sum(unique_applicants), pct_of_roll_change_2016 = sum(general_election_roll_changing_voters_2016)/sum(general_election_voters_2016), pct_of_new_2016 = sum(general_election_new_voters_2016)/sum(general_election_voters_2016))
count(subset_working_app_2$anid)
duplicates <- count(subset_working_app_2,anid)
duplicates <- duplicates %>%
arrange(desc(n))
num_dups <- table(duplicates$n)
num_dups
table(person_rank)
table(subset_working_appp_2$person_rank)
table(subset_working_app_2$person_rank)
# R script to open and combine many data files
# Note: Path variable should be updated to wherever the data is being stored.
# Data should be in TSV format
# THE COLUMNS MUST ALL HAVE THE SAME NAMES.
# When using the function rbind, the two data frames must have the same variables
# but they do not have to be in the same order.
# Remove the dataframe from the environment to avoid duplicates.
if(exists("merged_data"))
rm("merged_data")
path <- "/Users/anthonygoss/Projects/circle/R_ivr/real_data"
# Step 1. Quality check. Do the names of all files match?
source("/Users/anthonygoss/Projects/circle/R_ivr/check_names.R")
# NEEDSWORK
if(check_names(path) != 1)
stop()
# Step 2. Get the files, merge the data
# Merging pipeline credit to Hayward Goodwin from blog post
# "Merge all files in a directory using R into a single dataframe"
# Retrive list of files in the directory
file_list <- list.files(path)
# Create union of one big file
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("merged_data")){
merged_data <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
else if (exists("merged_data")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
merged_data<-rbind(merged_data, temp_dataset)
rm(temp_dataset)
}
}
# We now have the dataframe "merged data"
# Step 3: Call a function to perform counts of the data
# Credit to Prabhat Gautam
source("/Users/anthonygoss/Projects/circle/R_ivr/count_data.R")
# output: An Excel Spreadsheet with the appropriate counts
count_dat(merged_data)
View(merged_data)
# R script to open and combine many data files
# Note: Path variable should be updated to wherever the data is being stored.
# Data should be in TSV format
# THE COLUMNS MUST ALL HAVE THE SAME NAMES.
# When using the function rbind, the two data frames must have the same variables
# but they do not have to be in the same order.
# Remove the dataframe from the environment to avoid duplicates.
if(exists("merged_data"))
rm("merged_data")
path <- "/Users/anthonygoss/Projects/circle/R_ivr/real_data"
# Step 1. Quality check. Do the names of all files match?
source("/Users/anthonygoss/Projects/circle/R_ivr/check_names.R")
# NEEDSWORK
if(check_names(path) != 1)
stop()
# Step 2. Get the files, merge the data
# Merging pipeline credit to Hayward Goodwin from blog post
# "Merge all files in a directory using R into a single dataframe"
# Retrive list of files in the directory
file_list <- list.files(path)
# Create union of one big file
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("merged_data")){
merged_data <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
else if (exists("merged_data")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
merged_data<-rbind(merged_data, temp_dataset)
rm(temp_dataset)
}
}
# We now have the dataframe "merged data"
# Step 3: Call a function to perform counts of the data
# Credit to Prabhat Gautam
source("/Users/anthonygoss/Projects/circle/R_ivr/count_data.R")
# output: An Excel Spreadsheet with the appropriate counts
count_dat(merged_data)
